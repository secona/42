(deflisten workspaces_list :initial "[]" "sh ./scripts/workspaces.sh all")
(deflisten current_workspace :initial "1" "sh ./scripts/workspaces.sh active")

(defwidget logo []
  (button :class "logo"
    (label :text "  ")))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
    (box :orientation "h"
         :space-evenly false
         :class "workspaces"
         :hexpand true
      (for workspace in workspaces_list
        (button :onclick "hyprctl dispatch workspace ${workspace.id}" 
          "${current_workspace == workspace.id ? " " : " "}")))))

(defwidget clock []
  (box :class "clock" "${formattime(EWW_TIME, '%a, %d %b %Y %H:%M:%S')}"))

(defwidget battery []
  (box :class "battery" "󰁹 ${EWW_BATTERY["BAT1"].capacity}%"))

(defwidget memory []
  (box "󰍛 ${round(EWW_RAM.used_mem_perc, 0)}%"))

(defwidget memory_swap []
  (box "󰓡 ${round((EWW_RAM.total_swap - EWW_RAM.free_swap) / EWW_RAM.total_swap, 0)}%"))

(defwidget disk []
  (box "󰨣 ${round(EWW_DISK["/"].used_perc, 0)}%"))

(defwidget cpu []
  (box "󰻠 ${round(EWW_CPU.avg, 0)}%"))

(defwidget sysinfo []
  (box :class "sysinfo" :spacing 10
    (cpu)
    (memory)
    (memory_swap)
    (disk)))

(defwidget bar []
  (box :class "bar-widget" :orientation "h" :space-evenly true
    (box :orientation "h" :space-evenly false :halign "start"
      (logo)
      (workspaces))
    
    (box :orientation "h" :space-evenly false :halign "center"
      (clock))

    (box :orientation "h" :space-evenly false :halign "end" :spacing 20
      (systray)
      (sysinfo)
      (battery))))

(defwindow bar
  :monitor 0
  :exclusive true
  :windowtype "dock"
  :geometry (geometry :x "0.5%"
                      :y "0.5%"
                      :width "100%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
