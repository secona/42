(deflisten workspaces_list :initial "[]" "sh ./scripts/workspaces.sh all")

(deflisten media :initial "" "sh ./scripts/media.sh")

(defpoll wifi_color :interval "10s" "sh ./scripts/wifi.sh --COLOR")
(defpoll wifi_message :interval "10s" :initial "Unknown" "sh ./scripts/wifi.sh --MESSAGE")
(defpoll wifi_icon :interval "10s" :initial "󰤯" "sh ./scripts/wifi.sh --ICON")
(defpoll battery_icon :interval "10s" "sh ./scripts/battery.sh icon")
(defpoll volume_icon :interval "2s" "sh ./scripts/audio.sh volume_icon")
(defpoll volume_color :interval "2s" "sh ./scripts/audio.sh volume_color")
(defpoll input_volume_icon :interval "2s" "sh ./scripts/audio.sh input_volume_icon")
(defpoll input_volume_color :interval "2s" "sh ./scripts/audio.sh input_volume_color")

(defwidget media_control []
  (eventbox :visible {media != ""} :space-evenly false :spacing 20 :onclick "playerctl play-pause"
    (label :class "label" :truncate true :limit-width 30 :text "${media}")))

(defwidget microphone []
  (box :style "color: ${input_volume_color}" "${input_volume_icon}"))

(defwidget volume []
  (box :style "color: ${volume_color}" "${volume_icon}"))

(defwidget wifi []
  (box :tooltip "${wifi_message}" :style "color: ${wifi_color}" "${wifi_icon}"))

(defwidget logo []
  (button :class "logo"
    (label :text "")))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
    (box :orientation "h"
         :space-evenly false
         :class "workspaces"
         :hexpand true
      (for workspace in workspaces_list
        (button :onclick "swaymsg workspace number ${workspace.num}" 
                :width 25
                :class "workspace ${workspace.focused ? "active" : ""}"
          "${workspace.num}")))))

(defwidget clock []
  (box :class "clock" " ${formattime(EWW_TIME, '󰥔 %H:%M:%S')}"))

(defwidget date []
  (box :class "date" " ${formattime(EWW_TIME, '󰃭 %d %b %Y')}"))

(defwidget battery []
  (box :class "battery" "${battery_icon}${EWW_BATTERY["BAT1"].capacity}%"))

(defwidget memory []
  (box "󰍛 ${round(EWW_RAM.used_mem_perc, 0)}%"))

(defwidget memory_swap []
  (box "󰓡 ${round((EWW_RAM.total_swap - EWW_RAM.free_swap) / EWW_RAM.total_swap, 0)}%"))

(defwidget disk []
  (box "󰨣 ${round(EWW_DISK["/"].used_perc, 0)}%"))

(defwidget cpu []
  (box "󰻠 ${round(EWW_CPU.avg, 0)}%"))

(defwidget sysinfo []
  (box :class "sysinfo" :spacing 10
    (cpu)
    (memory)
    (memory_swap)
    (disk)))

(defwidget bar []
  (box :class "bar-widget" :orientation "h" :space-evenly true
    (box :orientation "h" :space-evenly false :halign "start" :spacing 20 :class "island" :style "padding: 0 10px;"
      (logo)
      (clock)
      (date)
      (media_control))
    
    (box :orientation "h" :space-evenly false :halign "center" :spacing 20 :class "island"
      (workspaces))

    (box :orientation "h" :space-evenly false :halign "end" :spacing 10
      (box :space-evenly false :halign "end" :class "island" :spacing 20 :style "padding: 0 10px;"
        (systray)
        (sysinfo))
      (box :space-evenly false :halign "end" :class "island" :spacing 10 :style "padding: 0 10px;"
        (microphone)
        (volume)
        (wifi)
        (battery)))))

(defwindow bar
  :monitor 0
  :exclusive true
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0.5%"
                      :width "99%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
